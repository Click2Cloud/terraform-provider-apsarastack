package apsarastack

import (
	"encoding/json"
	"fmt"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
	"github.com/aliyun/alibaba-cloud-sdk-go/services/ecs"
	"github.com/aliyun/terraform-provider-apsarastack/apsarastack/connectivity"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	"log"
	"strings"

	_ "context"

	_ "io/ioutil"

	_ "net/http"
	_ "os"
	_ "os/user"
	_ "strconv"

	_ "time"
)

type Autogenerated2 struct {
	Redirect        bool   `json:"redirect"`
	Eagleeyetraceid string `json:"eagleEyeTraceId"`
	Asapisuccess    bool   `json:"asapiSuccess"`
	Code            string `json:"code"`
	Cost            int    `json:"cost"`
	Data            []struct {
		Organizationid int    `json:"organizationId"`
		Groupname      string `json:"groupName"`
		Augid          string `json:"augId"`

		Roles []struct {
			Rolerange              string `json:"roleRange"`
			Arid                   string `json:"arId"`
			Muserid                string `json:"muserId"`
			Ramrole                bool   `json:"rAMRole"`
			Code                   string `json:"code"`
			Active                 bool   `json:"active"`
			Description            string `json:"description"`
			Roletype               string `json:"roleType"`
			Default                bool   `json:"default"`
			Ownerorganizationid    int    `json:"ownerOrganizationId"`
			Enable                 bool   `json:"enable"`
			Rolename               string `json:"roleName"`
			ID                     int    `json:"id"`
			Rolelevel              int64  `json:"roleLevel"`
			Cuserid                string `json:"cuserId"`
			Organizationvisibility string `json:"organizationVisibility"`
		} `json:"roles"`
		Createtimestamp int64 `json:"createTimeStamp"`
		Resourcesets    []struct {
			Organizationid    int    `json:"organizationID"`
			Creator           string `json:"creator"`
			Gmtmodified       int64  `json:"gmtModified"`
			Resourcegroupname string `json:"resourceGroupName"`
			Gmtcreated        int64  `json:"gmtCreated"`
			Resourcegrouptype int    `json:"resourceGroupType"`
			Rsid              string `json:"rsId"`
			ID                int    `json:"id"`
		} `json:"resourceSets"`
		ID    int `json:"id"`
		Users []struct {
			Cellphonenum       string `json:"cellphoneNum"`
			Muserid            string `json:"muserId,omitempty"`
			Aliyunuser         bool   `json:"aliyunUser"`
			Backendaccounttype string `json:"backendAccountType"`
			Enabledingtalk     bool   `json:"enableDingTalk"`
			Accounttype        int    `json:"accountType"`
			Active             bool   `json:"active"`
			Mtime              int64  `json:"mtime,omitempty"`
			Organizationid     int    `json:"organizationId"`
			Default            bool   `json:"default"`
			Deleted            bool   `json:"deleted"`
			Logintime          int64  `json:"loginTime,omitempty"`
			Userloginctrlid    int    `json:"userLoginCtrlId"`
			Loginname          string `json:"loginName"`
			Ctime              int64  `json:"ctime"`
			ID                 int    `json:"id"`
			Mobilenationcode   string `json:"mobileNationCode"`
			Cuserid            string `json:"cuserId"`
			Enableemail        bool   `json:"enableEmail"`
			Ramuser            bool   `json:"ramUser"`
			Defaultroleid      int    `json:"defaultRoleId"`
			Email              string `json:"email"`
			Enableshortmessage bool   `json:"enableShortMessage"`
			Username           string `json:"username"`
		} `json:"users"`
		Organization struct {
			Muserid           string        `json:"muserId"`
			Internal          bool          `json:"internal"`
			Multicloudstatus  string        `json:"multiCloudStatus"`
			Supportregionlist []interface{} `json:"supportRegionList"`
			Level             string        `json:"level"`
			Name              string        `json:"name"`
			Alias             string        `json:"alias"`
			ID                int           `json:"id"`
			Cuserid           string        `json:"cuserId"`
			UUID              string        `json:"uuid"`
			Parentid          int           `json:"parentId"`
		} `json:"organization,omitempty"`
	} `json:"data"`
	Pageinfo struct {
		Total       int `json:"total"`
		Totalpage   int `json:"totalPage"`
		Pagesize    int `json:"pageSize"`
		Currentpage int `json:"currentPage"`
	} `json:"pageInfo"`
	Message        string `json:"message"`
	Serverrole     string `json:"serverRole"`
	Asapirequestid string `json:"asapiRequestId"`
	Success        bool   `json:"success"`
	Domain         string `json:"domain"`
	Purelistdata   bool   `json:"pureListData"`
	API            string `json:"api"`
	Asapierrorcode string `json:"asapiErrorCode"`
}

func dataSourceApsaraStackAscmListUserGroupId() *schema.Resource {
	return &schema.Resource{

		Read: dataSourceApsaraStackAscmListUserGroupIdRead,
		Schema: map[string]*schema.Schema{
			"data": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"organizationid": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"groupname": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"augid": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"organization": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"muserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"internal": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"multicloudstatus": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"supportregionlist": {
										Type:     schema.TypeList,
										Computed: true,
										Elem:     &schema.Schema{Type: schema.TypeString},
									},
									"level": {
										Type:     schema.TypeFloat,
										Computed: true,
									},
									"name": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"alias": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"supportregions": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"id": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"cuserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"uuid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"parent_id": {
										Type:     schema.TypeInt,
										Computed: true,
									},
								},
							},
						},

						"resourcesets": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"organizationid": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"creator": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"gmtmodified": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"resourcegroupname": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"gmtcreated": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"resourcegrouptype": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"rsid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"id": {
										Type:     schema.TypeInt,
										Computed: true,
									},
								},
							},
						},

						"roles": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"rolerange": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"arid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"muserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"ramrole": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"code": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"active": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"description": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"roletype": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"default": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"ownerorganizationid": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"enable": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"rolename": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"id": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"rolelevel": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"cuserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"organizationvisibility": {
										Type:     schema.TypeInt,
										Computed: true,
									},
								},
							},
						},

						"users": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"cellphonenum": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"muserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"aliyunuser": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"backendaccounttype": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"enabledingtalk": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"accounttype": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"active": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"mtime": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"organizationid": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"default": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"deleted": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"logintime": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"userloginctrlid": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"loginname": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"ctime": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"id": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"mobilenationcode": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"cuserid": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"enableemail": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"ramuser": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"defaultroleid": {
										Type:     schema.TypeInt,
										Computed: true,
									},
									"email": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"enableshortmessage": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"username": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func dataSourceApsaraStackAscmListUserGroupIdRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*connectivity.ApsaraStackClient)
	request := requests.NewCommonRequest()
	if strings.ToLower(client.Config.Protocol) == "https" {
		request.Scheme = "https"
	} else {
		request.Scheme = "http"
	}
	if client.Config.Insecure {
		request.SetHTTPSInsecure(client.Config.Insecure)
	}
	log.Printf("xyz:3267")
	request.Method = "POST"
	request.Product = "ascm"
	request.Version = "2019-05-10"
	var parentId string
	if v, ok := d.GetOk("parent_id"); ok {
		parentId = fmt.Sprint(v.(int))
	} else {
		parentId = client.Department
	}

	request.RegionId = client.RegionId
	request.ApiName = "ListUserGroups"
	request.Headers = map[string]string{"RegionId": client.RegionId}
	request.QueryParams = map[string]string{
		"AccessKeyId":     client.AccessKey,
		"AccessKeySecret": client.SecretKey,
		"Product":         "ascm",
		"RegionId":        client.RegionId,
		"Action":          "ListUserGroups",
		"Version":         "2019-05-10",
		"id":              parentId,
	}

	log.Printf("1234")
	responseA := Autogenerated2{}

	for {
		raw, err := client.WithEcsClient(func(ecsClient *ecs.Client) (interface{}, error) {
			return ecsClient.ProcessCommonRequest(request)
		})
		log.Printf(" rsponse of raw MeteringWebQuery : %s", raw)

		if err != nil {
			return WrapErrorf(err, DataDefaultErrorMsg, "apsarastack_ascm_organizations", request.GetActionName(), ApsaraStackSdkGoERROR)
		}
		log.Printf("wwwwwwwxxxxxxxxxxxxxxxxxxwwwwwwwwwwwwwwwwww")
		bresponse, _ := raw.(*responses.CommonResponse)

		err = json.Unmarshal(bresponse.GetHttpContentBytes(), &responseA)
		if err != nil {
			return nil
		}

		if bresponse.IsSuccess() == true {
			break
		}

	}
	log.Printf("xxxxxxxxxxxxxxxxcheck response333 after forxxxxxxxxxxxxxxxx")

	log.Printf("xxxxxxxxxxxxxxxcheck response333 after forxxxxxxxxxxxxxx")

	var ids []string
	var s []map[string]interface{}

	for _, rg := range responseA.Data {
		var resdet []map[string]interface{}
		var roldet []map[string]interface{}
		var usrdet []map[string]interface{}
		var orgdet []map[string]interface{}

		mappingOrg := map[string]interface{}{
			"muserid":           rg.Organization.Muserid,
			"internal":          rg.Organization.Internal,
			"multicloudstatus":  rg.Organization.Multicloudstatus,
			"supportregionlist": rg.Organization.Supportregionlist,
			"name":              rg.Organization.Name,
			"alias":             rg.Organization.Alias,
			"id":                rg.Organization.ID,
			"cuserid":           rg.Organization.Cuserid,
			"uuid":              rg.Organization.UUID,
			"parent_id":         rg.Organization.Parentid,
		}
		orgdet = append(orgdet, mappingOrg)

		for _, org := range rg.Resourcesets {
			mapping2 := map[string]interface{}{
				"organizationid":    org.Organizationid,
				"creator":           org.Creator,
				"gmtmodified":       org.Gmtmodified,
				"resourcegroupname": org.Resourcegroupname,
				"gmtcreated":        org.Gmtcreated,
				"resourcegrouptype": org.Resourcegrouptype,
				"rsid":              org.Rsid,
				"id":                org.ID,
			}
			resdet = append(resdet, mapping2)
		}
		for _, org1 := range rg.Roles {
			mapping3 := map[string]interface{}{
				"rolerange":           org1.Rolerange,
				"arid":                org1.Arid,
				"muserid":             org1.Muserid,
				"ramrole":             org1.Ramrole,
				"code":                org1.Code,
				"active":              org1.Active,
				"description":         org1.Description,
				"roletype":            org1.Roletype,
				"default":             org1.Default,
				"ownerorganizationid": org1.Ownerorganizationid,
				"enable":              org1.Enable,
				"rolename":            org1.Rolename,
				"id":                  org1.ID,
				"rolelevel":           org1.Rolelevel,
				"cuserid":             org1.Cuserid,
				//"organizationvisibility": 		org1.Organizationvisibility,

			}
			roldet = append(roldet, mapping3)
		}
		for _, org2 := range rg.Users {
			mapping3 := map[string]interface{}{
				"cellphonenum":       org2.Cellphonenum,
				"muserid":            org2.Muserid,
				"aliyunuser":         org2.Aliyunuser,
				"backendaccounttype": org2.Backendaccounttype,
				"enabledingtalk":     org2.Enabledingtalk,
				"accounttype":        org2.Accounttype,
				"active":             org2.Active,
				"mtime":              org2.Mtime,
				"default":            org2.Default,
				"deleted":            org2.Deleted,
				"logintime":          org2.Logintime,
				"userloginctrlid":    org2.Userloginctrlid,
				"loginname":          org2.Loginname,
				"ctime":              org2.Ctime,
				"id":                 org2.ID,
				"mobilenationcode":   org2.Mobilenationcode,
				"cuserid":            org2.Cuserid,
				"enableemail":        org2.Enableemail,
				"ramuser":            org2.Ramuser,
				"defaultroleid":      org2.Defaultroleid,
				"email":              org2.Email,
				"enableshortmessage": org2.Enableshortmessage,
				"username":           org2.Username,
			}
			usrdet = append(usrdet, mapping3)
		}
		mapping := map[string]interface{}{

			"organizationid": rg.Organizationid,
			"groupname":      rg.Groupname,
			"augid":          rg.Augid,
			"roles":          roldet,
			"resourcesets":   resdet,
			"users":          usrdet,
			"organization":   orgdet,
		}
		s = append(s, mapping)

		log.Printf(" Smap2")
	}
	d.Set("data", s)
	d.SetId(dataResourceIdHash(ids))

	if output, ok := d.GetOk("output_file"); ok && output.(string) != "" {
		writeToFile(output.(string), s)
	}

	return nil
}
